rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
1:length(e)
e1 <- 1:length(1:5)
e1
length(e)
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
function(Psi, S, q) {     sc <- diag(1 / sqrt(Psi))     Sstar <- sc %*% S %*% sc     E <- eigen(Sstar, symmetric = TRUE, only.values = TRUE)     e <- E$values[ - (1L:q)]     e1 <- 1:length(e)     for (i in 1:length(e)) {         e1[i] <- ifelse(e[i] > 0, sum(log(e[i]) - e[i]) - q + nrow(S), Inf)     }     # sum(log(e) - e) - q + nrow(S)     ##        print(round(c(Psi, -e), 5))  # for tracing     - e }
FAfn <- function(Psi, S, q) {     sc <- diag(1 / sqrt(Psi))     Sstar <- sc %*% S %*% sc     E <- eigen(Sstar, symmetric = TRUE, only.values = TRUE)     e <- E$values[ - (1L:q)]     e1 <- 1:length(e)     for (i in 1:length(e)) {         e1[i] <- ifelse(e[i] > 0, sum(log(e[i]) - e[i]) - q + nrow(S), Inf)     }     # sum(log(e) - e) - q + nrow(S)     ##        print(round(c(Psi, -e), 5))  # for tracing     - e }
FAfn
FAfn(1,1,1)
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
(1 - 0.5 * factors / p) / diag(solve(cmat, tol = 1e-25))
ifelse(e[i] > 0, sum(log(e[i]) - e[i]) - q + nrow(S), Inf)
e1
log(e)
[1,1]
1, 1,4 
log(e) - e
sum(log(e) - e)
fa
data
nS$Components["nkaiser"][[1]]
fa(data, nS$Components["nkaiser"][[1]])
install.packages(GPArotation)
cor(data)
fa(cor(data), nS$Components["nkaiser"][[1]])
install.packages("GPArotation")
fa(cor(data), nS$Components["nkaiser"][[1]])
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/LDA/executeLda.R")
cov.wt(z)
covmat$cov
cv
start
surface3d
library(MASS) library(rglwidget)
surface3d
library(rgl)
surface3d
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
KMO_measure
kmo$KMO
source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
rtvs::debug_source("D:/Diploma/R/RSolution/RSolution/DensityClustering/executeDCA.R")
0.5
db
dbs
dbs.cluster
dbs$cluster
library(MASS) library(rglwidget) library(rgl)
data(volcano)
data(volcano)
z <- 2 * volcano
x <- 10 * (1:nrow(z))
y <- 10 * (1:ncol(z))
z
dim(z)
dim(x)
dim(y)
length(y)
length(x)
surface3d(x, y, z)
plot3d(data)
plot3d(data, col = dbs$cluster + 1L)
dbs
scores
plot3d(scores, col = dbs$cluster + 1L)
kNN(data)
kNN(data)
kNN(data)
45
dbs1 <- dbscan(data, 45, ncol(data) + 1)
dbs1
dbs1 <- dbscan(data, 50, ncol(data) + 1)
dbs1
getNFactors(t(data))
c <- c(1:2, 1:3)
c
pam
classify
install.packages(classifly)
install.packages("classifly")
classifly(data)
library(classifly)
classifly(data)
classifly(data, Kyphosis ~ ., lda)
data[1]
data[1,1]
data[,1]
data[1,]
classifly(data, ATD0 ~ ., lda)
install.packages(rggobi)
install.packages("rggobi")
classifly(data, ATD0 ~ ., lda)
classifly(data, ATD0 ~ ., lda)
library(rggobi)
install.packages("ggobi")
install.packages("RGtk2")
install.packages("rggobi")
classifly(data, ATD0 ~ ., lda)
install.packages("installr")
require(installr)
updateR()
updateR()
require(installr)
updateR()
R.Version()
library(shiny)
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
list("Data successfully uploaded to the data base!")
list("Data successfully uploaded to the data base!")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
install.packages("ggplot2")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
filename
filename()
file
runApp("WebApplication")
runApp("WebApplication")
library(shiny)
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
mongo
mongo_collection_new
library(mongolite)
mongo_collection_new
mongolite::mongo_collection_new
mongolite::mongo
install.packages("rmongodb")
install.packages("rmongodb")
library(rmongodb)
mongo.drop
db <- mongo(collection = collection_name,                       url = sprintf(                         "mongodb://%s:%s@%s/%s",                         options()$mongodb$username,                         options()$mongodb$password,                         options()$mongodb$host,                         databaseName))
options(mongodb = list(       "host" = "ds064628.mlab.com:64628",       "username" = "Admin",       "password" = "me")) databaseName <- "fbme" collectionName <- "localClinic" apiKey <- "wmMG33o5YrQm2WnvkvdwMS5iGyXwtFPP" dbnReplace <- "{databaseName}" dbnReplacePattern <- "/{databaseName/}" collectionsUrl <- paste("https://api.mlab.com/api/1/databases/", dbnReplace, "/collections?apiKey=wmMG33o5YrQm2WnvkvdwMS5iGyXwtFPP", sep = "") collectionOfCollections <- "collectionNames"
db <- mongo(collection = "localClinic",                       url = sprintf(                         "mongodb://%s:%s@%s/%s",                         options()$mongodb$username,                         options()$mongodb$password,                         options()$mongodb$host,                         databaseName))
db$remove
db$drop
db$drop()
db <- mongo(collection = collectionOfCollections, + url = sprintf( + "mongodb://%s:%s@%s/%s", + options()$mongodb$username, + options()$mongodb$password, + options()$mongodb$host, + databaseName))
db <- mongo(collection = collectionOfCollections,                     url = sprintf(                     "mongodb://%s:%s@%s/%s",                     options()$mongodb$username,                     options()$mongodb$password,                     options()$mongodb$host,                     databaseName))
db$remove(list("name"="localClinic"))
db$remove
mongo.bson
install.packages("jsonlite")
library(jsonlite)
serializeJSON
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
paste("{\"name\":\"", collectionName, "\"}")
paste("{\"name\":\"", collectionName, "\"}")
paste("{\"name\":\"", collectionName, "\"}", sep = "")
db$remove(paste("{\"name\":\"", collectionName, "\"}", sep = ""))
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
data(iris) iris <- as.matrix(iris[, 1:4]) kNNdist(iris, k = 4, search = "kd") kNNdistplot(iris, k = 4)
library(dbscan)
data(iris) + iris <- as.matrix(iris[, 1:4]) + kNNdist(iris, k = 4, search = "kd") + kNNdistplot(iris, k = 4)
data(iris) iris <- as.matrix(iris[, 1:4]) kNNdist(iris, k = 4, search = "kd") kNNdistplot(iris, k = 4)
dim(iris)
kNNdistplot(iris, k = 4)
frNN(iris)
dbscan
dim(iris)
max(iris)
max(iris) - min(iris)
kNN(iris)
kNN
nclust = ncol(data) + 1
kNN(iris, nclust)
nclust
nclust = ncol(iris) + 1
kNN(iris, nclust)
k <- kNNdistplot(data, nclust)
k <- kNNdistplot(iris, nclust)
k
kNNdist(iris, nclust)
dim(kNNdist(iris, nclust))
optics(iris, nclust, nclust)
op <- optics(iris, nclust, nclust)
op
op$eps
op$order
op$reachdist
op$coredist
plot(op$coredist)
plot(op$reachdist)
op <- optics(iris, nclust, nclust, eps_cl = 1)
op$cluster
op <- optics(iris, nclust, nclust)
op <- optics(iris, nclust, nclust, eps_cl = 1)
op$cluster
library(rgl)
dim(iris)
kNNdistplot(iris, nclust)
dbscan(iris, 0.5, nclust)
dbs <- dbscan(iris, 0.5, nclust)
dbs
dbs$cluster
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
as.null("")
as.null("sdf")
is.null(x)
is.null(" ")
is.null(NA)
NA == NA
"" == NULL
"" == " "
!("" == NULL)
is.null("")
!is.null("")
list("none" = 2, "varimax" = 1, "promax" = 3, "equamax" = 4, "oblimin" = 5)
"0.6"
"0,6"
"0/6"
"0.6"
as.double("0.6")
as.double("0,6")
gsub(",", ".", "0,6")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
input$startAlgorithm
input$startAlgorithm
notNullNaEmpty(tempfilename)
tempfilename
notNullNaEmpty(input$knnMeasure)
compareNA(input$knnMeasure, NA)
is.null(input$knnMeasure)
runApp("WebApplication")
runApp("WebApplication")
notNullNaEmpty(tempfilename)
notNullNaEmpty(input$knnMeasure)
input$knnMeasure
compareNA(input$knnMeasure, "")
value
compareNA(value, NA) || is.null(value) || compareNA(value, "")
notNullNaEmpty <- function(value) {     if (!(compareNA(value, NA) || is.null(value) || compareNA(value, ""))) {         return(TRUE)     } else {         return(FALSE)     } }
notNullNaEmpty("0,6")
compareNA <- function(v1, v2) {     # This function returns TRUE wherever elements are the same, including NA's,     # and false everywhere else.     same <- (v1 == v2) | (is.na(v1) & is.na(v2))     same[is.na(same)] <- FALSE     return(same) }
notNullNaEmpty("0,6")
notNullNaEmpty("34tge")
runApp("WebApplication")
runApp("WebApplication")
dim(data)
receiveData()
names(collectionOptions[as.integer(input$selectCollection)])
input$selectCollection
runApp("WebApplication")
runApp("WebApplication")
read.csv
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
input$sendToNewContainerFA
file.exists(tempfilename)
file.exists(tempfilename)
notNullNaEmpty(input$newConteiner)
input$sendToNewContainerFA
input$sendToNewContainerFA
tempfilename
tempfilename
runApp("WebApplication")
runApp("WebApplication")
c(1:5)
c(1:5, 1:5)
read.csv("tempfile331185")
read.csv("tempfile331185.csv")
read.csv("D:/Diploma/R/RSolution/RSolution/WebApplication/tempfile331185.csv")
data <- read.csv("D:/Diploma/R/RSolution/RSolution/WebApplication/tempfile331185.csv")
dim(data)
dim(data[-1])
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
dbscanImp <- function(data, eps, nclust = NULL) {     library(dbscan)     if (is.null(nclust)) {         nclust = ncol(data) + 1     }     db = dbscan(data, eps, nclust)     return(db) }
dbscanImp(iris, 0.5)
data <- read.xlsx(file = "D:/Diploma/R/Data.xlsx", header = T, sheetIndex = 1)
library(xlsx)
data <- read.xlsx(file = "D:/Diploma/R/Data.xlsx", header = T, sheetIndex = 1)
library(nFactors)
data <- t(data)
ev <- eigen(cor(data)) # get eigenvalues ap <- parallel(subject = nrow(data), var = ncol(data), rep = 100, cent = .05) nS <- nScree(x = ev$values, aparallel = ap$eigen$qevpea)
nS
runApp("WebApplication")
runApp("WebApplication")
source("D:\\Diploma\\R\\RSolution\\RSolution\\DensityClustering\\densityClustering.R")
library(xlsx)
data <- read.xlsx(file = "D:/Diploma/R/Data.xlsx", header = T, sheetIndex = 1)
data
dbs <- dbscanFin2(data)
dbs
dbs$cluster
dbs$group
library(shiny)
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
source("D:\\Diploma\\R\\RSolution\\RSolution\\WebApplication\\deploy.R")
source("D:\\Diploma\\R\\RSolution\\RSolution\\WebApplication\\deploy.R")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
runApp("WebApplication")
source("D:\\Diploma\\R\\RSolution\\RSolution\\WebApplication\\deploy.R")
